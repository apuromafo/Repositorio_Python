# gen_manejo_errores.py

import sys
from typing import NoReturn

# =================================================================
# 1. MANEJO DE INTERRUPCIONES Y ERRORES DE SALIDA
# =================================================================

def handle_keyboard_interrupt() -> NoReturn:
    """
    Funci√≥n que se llama cuando el usuario presiona Ctrl+C (KeyboardInterrupt).
    Garantiza una salida limpia del programa.
    """
    print("\n\nüëã ¬°Interrupci√≥n detectada (Ctrl+C)! Finalizando el generador de forma segura.")
    print("Los archivos de exportaci√≥n incompletos (si existen) pueden no ser v√°lidos.")
    sys.exit(0) # Salida con c√≥digo 0 (√©xito), ya que fue una acci√≥n intencional del usuario.

def handle_generic_exception(e: Exception, context: str):
    """
    Funci√≥n para manejar y reportar excepciones gen√©ricas de forma legible.

    Args:
        e: La excepci√≥n capturada.
        context: Descripci√≥n de la parte del c√≥digo que fall√≥ (e.g., "Generaci√≥n de Personas").
    """
    print("\n" + "=" * 70)
    print(f"‚ùå ¬°ERROR CR√çTICO DETECTADO EN: {context.upper()}!")
    print(f"Tipo de Error: {type(e).__name__}")
    print(f"Mensaje: {e}")
    print("=" * 70)
    print("El generador se detendr√°. Por favor, revise los logs para depuraci√≥n.")
    sys.exit(1) # Salida con c√≥digo 1 (error).

def run_with_error_handling(main_function):
    """
    Funci√≥n wrapper que ejecuta la funci√≥n principal dentro de un bloque
    try-except para manejar KeyboardInterrupt y otras excepciones gen√©ricas.
    """
    try:
        main_function()
    except KeyboardInterrupt:
        handle_keyboard_interrupt()
    except Exception as e:
        # Aqu√≠ puedes capturar el nombre de la funci√≥n principal o dejar un mensaje gen√©rico
        handle_generic_exception(e, "Flujo principal del script")

# El resto de la l√≥gica de la aplicaci√≥n no debe estar aqu√≠.
# Este archivo solo debe contener las funciones de manejo de errores.